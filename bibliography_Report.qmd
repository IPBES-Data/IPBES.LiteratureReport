---
title: "Quality report of the IPBES IAS bibliography"
format:
    html:
        toc: true
        toc-depth: 2
        embed-resources: true
        code-fold: true
        code-summary: "Show the code"
        # grid:
        #     sidebar-width: 0px
        #     body-width: 4000px
        #     margin-width: 200px
        #     gutter-width: 1.5rem    
params:
    # input
    bibliography_zotero: !expr file.path(".", "input", "IPBES IAS.csv")    # csv export of bibliography from Zotero
    bibliography_name: "IPBES IAS Assessment"
    bibliography_url: "https://www.zotero.org/groups/2352922/"
    # data
    fn_bibliography_metrics: !expr file.path(".", "data", "bibliography_metrics.rds")               # rds file with works from OpenAlex
    # 
    ilk_bibliography_zotero: !expr file.path(".", "input", "IPBES ILK.csv")    # csv export of bibliography from Zotero
    ilk_bibliography_name: "IPBES ILK Bibliography"
    ilk_bibliography_url: "https://www.zotero.org/groups/xxxxxx/"
    # data
    fn_ilk_bibliography_metrics: !expr file.path(".", "data", "ilk_bibliography_metrics.rds")               # rds file with works from OpenAlex
    #
    exists_cache: !expr file.path(".", "cache", "doi_exist.rds")
    #
    mc.cores: 10
---

# Introduction

This report assesses the following in regards to the provided bibliography named ``r basename(params$fn_bibliography)``:

- [ ] "cleanliness" of bibliography, regarding DOIs, 
    - [x] number of DOIs
    - [x] duplicates
    - [x] Syntactically valid
    - [ ] existing
    - [ ] retracted
    - [ ] ...
- [ ] other identifiers by proportion
- [ ] geographic distribution by institute
- [x] Open access status
- [x] statistics about the most cited journals, publication dates, ...
- [ ] VOSViewer based visualisations
- [ ] OpenAlex topics
- [x] year of publication
- [ ] ...

- [ ] Download works by ISBN and ISSN

Remarks: 
- Group ID is in the json, but not in the csv. The group ID makes it possible to directly jump to the reference in the Zotero Library online.

```{r}
#| label: setup
#| include: false
#|
if (!(exists("params"))) {
    params <- rmarkdown::yaml_front_matter("./bibliography_report.qmd")$params
}

suppressPackageStartupMessages({
    # library(jsonlite)
    library(openalexR)
    library(knitr)
    library(dplyr)
    library(ggplot2)
    # library(ggraph)
    # library(tidygraph)
    # library(tictoc)
    library(pbmcapply)
    library(pbapply)
    library(IPBES.R)
})

## Setup search
suppressWarnings(
    invisible(
        oa_fetch(
            entity = "works",
            doi = "dummy",
            per_page = 200,
            verbose = FALSE
        )
    )
)

source(file.path(".", "R", "bibliography_metrics.R"))
```

# Bibliography Setup
The bibliography is loaded and the DOIs, ISBNs and ISSNs are extracted.
In a second step, the corresponding works are downloaded from [OpenAlex(https://openalex.org)].

```{r}
#| label: load_ilk_bibliography
#|

if (file.exists(params$fn_ilk_bibliography_metrics)) {
    ilk_bibliography <- readRDS(params$fn_ilk_bibliography_metrics)
} else {
    ilk_bibliography <- get_ilk_bibliography(params)

    saveRDS(ilk_bibliography, params$fn_ilk_bibliography_metrics)
}

```

```{r}
#| label: load_bibliography
#|

if (file.exists(params$fn_bibliography_metrics)) {
    bibliography <- readRDS(params$fn_bibliography_metrics)
} else {
    bibliography <- get_bibliography(params)

    saveRDS(bibliography, params$fn_bibliography_metrics)
}
```

# Data Quality of the Bibliography

## Cleanliness of bibliography

One measure of the cleanliness of a Bibliography is assessed by checking the number of references that have a DOI. The following table gives an overview over some numbers regarding the DOIs, ISBNs and ISSNs in the bibliography.

### Entries with DOIs, ISBNs or ISSNs

To identify a reference, the most widely used identifier is the DOI. The following table shows the number of references with a DOI and the number of unique DOIs.

To consider duplicate ISBNs or ISSNs as duplicates entries in the library is not waranted as e.g. differenc chapters of a book can be separate entries in the library and therefore lead toi duplicates. 

- **DOIs**: `r sum(!is.na(bibliography$dois_bib))` (`r 100 * sum(!is.na(bibliography$dois_bib)) / nrow(bibliography$bibliography)`%) - `r length(bibliography$dois_bib) - length(unique((bibliography$dois_bib)))` duplicates
- **ISBNs**: `r sum(!is.na(bibliography$isbns))` (`r 100 * sum(!is.na(bibliography$isbns)) / nrow(bibliography$bibliography)`%) - `r length(bibliography$isbns) - length(unique((bibliography$isbns)))` duplicates
- **ISSNs**: `r sum(!is.na(bibliography$issns))` (`r 100 * sum(!is.na(bibliography$issns)) / nrow(bibliography$bibliography)`%) - `r length(bibliography$issns) - length(unique((bibliography$issns)))` duplicates


The following DOIs are duplicates in the bibliography. This table should be empty.
```{r}
#| label: duplicates

# duplicate_isbns <- paste0("https://isbnsearch.org/search?s=", bibliography$dois_bib[duplicated(bibliography$isbns)])
# duplicate_issns <- paste0("", bibliography$dois_bib[duplicated(bibliography$issns)])


data.frame(
    Type = "doi",
    Identifier = sprintf('<a href="https://doi.org/%s" target="_blank">%s</a>', bibliography$dois_bib[duplicated(bibliography$dois_bib)], bibliography$dois_bib[duplicated(bibliography$dois_bib)])
) |>
    knitr::kable(
        caption = "Duplicate DOIs in the Bibliography",
        escape = FALSE
    )
```



### DOIs in Open Alex

To validate the existence and validity of the DOIs, we check if the DOIs are in the OpenAlex database. 

```{r}
#| label: ois_in_oa

dois_not_in_oa <- unique(bibliography$dois_bib)[!(unique(bibliography$dois_bib) %in% bibliography$dois_works)]

dois_valid <- dois_not_in_oa[IPBES.R::doi_valid(dois_not_in_oa)]
```

Of the `r length(unique(bibliography$dois_bib))` in the library which have a DOI, `r length(dois_not_in_oa)` (`r 100 * length(dois_not_in_oa) / length(unique(bibliography$dois_bib))`%) are in not in OpenAlex. 

```{r}
#| label: dois_not_in_oa_table
data.frame(
    Type = "doi",
    Identifier = sprintf('<a href="https://doi.org/%s" target="_blank">%s</a>', dois_not_in_oa, dois_not_in_oa)
) |>
    IPBES.R::table_dt(caption = "The Caption")
```

Of these `r (length(dois_not_in_oa) - length(dois_valid))` are not valid. These are:

```{r}
data.frame(
    Type = "doi",
    Identifier = sprintf('<a href="https://doi.org/%s" target="_blank">%s</a>', dois_not_in_oa[!(dois_not_in_oa %in% dois_valid)], dois_not_in_oa[!(dois_not_in_oa %in% dois_valid)])
) |>
    knitr::kable(
        caption = "Non Valid DOIs in the Bibliography",
        escape = FALSE
    )
```


TODO Finally we check, if these dois exist but are not ingested into OpanAlex. This is done using the `doi.org` resolver
This is disabled at the moment.

```{r}
#| label: dois_exist
#| eval: false

dois_exist <- IPBES.R::doi_exists(
    dois_valid,
    cache_file = file.path(".", "cache", "doi_exist.rds")
)
```


```{r}
#| label: quality
#| eval: false

to_check <- bibliography$dois_bib[!(bibliography$dois_bib %in% dois_works)]

dois_valid <- IPBES.R::doi_valid(bibliography$dois_bib)
dois_openalex <- bibliography$dois_bib %in% dois_works
names(dois_openalex) <- bibliography$dois_bib

dois_exist <- IPBES.R::doi_exists(to_check, cache_file = file.path(".", "cache", "doi_exist.rds"))
dois_not_retracted <- IPBES.R::doi_not_retracted(bibliography$dois_bib, cache_file = file.path(".", "cache", "doi_not_retracted.rds"))

sprintf(
    fmt = paste(
        "Number of references: \t\t %d",
        "Number of DOIs: \t\t %d",
        "Number of Duplicate DOIs: \t %d",
        "Number of DOIs in OpenAlex: \t %d ( %f %)",
        "Number of Existing DOIs: \t %d",
        "Number of Retracted DOIs: \t %d",
        "Percentage of Duplicate DOIs: \t %f",
        sep = "\n"
    ),
    nrow(bibliography),
    sum(!is.na(bibliography$dois_bib)),
    length(bibliography$dois_bib) - length(unique((bibliography$dois_bib))),
    sum(dois_openalex), 100 * sum(dois_openalex) / nrow(bibliography),
    sum(dois_exist),
    sum(!dois_not_retracted),
    ((dois_valid |> unique() |> length()) / length(dois_valid)) |> round(digits = 3) * 100
) |> cat()
```

```{r}
#| eval: false

oldopts <- options(knitr.kable.NA = "")
data.frame(
    Measure = c(
        "# References",
        "**DOI**",
        "# DOIs",
        "# Duplicate DOIs",
        "# Existing DOIs",
        "# Retracted DOIs",
        "% Duplicate DOIs",
        "**ISBN**",
        "# ISBNs",
        "# Duplicate ISBNs",
        "**ISSN**",
        "# ISSNs",
        "# Duplicate ISSNs"
    ),
    Value = c(
        nrow(bibliography),
        NA,
        sum(!is.na(bibliography$dois_bib)),
        length(bibliography$dois_bib) - length(unique((bibliography$dois_bib))),
        sum(dois_exist),
        sum(!dois_not_retracted),
        ((dois_valid |> unique() |> length()) / length(dois_valid)) |> round(digits = 3) * 100,
        NA,
        sum(!is.na(bibliography$isbns)),
        length(bibliography$isbns) - length(unique((bibliography$isbns))),
        NA,
        sum(!is.na(bibliography$issns)),
        length(bibliography$issns) - length(unique((bibliography$issns)))
    )
) |>
    knitr::kable(
        caption = "Cleanliness of the Bibliography",
    )
options(oldopts)
```

# Contentual and Bibliographic analysis

## Publication types

```{r}
bibliography$bibliography |>
    dplyr::group_by(
        Item.Type
    ) |>
    dplyr::summarize(
        count = n()
    ) |>
    dplyr::arrange(
        desc(count)
    ) |>
    knitr::kable()
```


## Year of Publication

```{r}
#| label: publication_years_figure
#| fig-height: 10
#| fig-width: 10

data_bib <- bibliography$bibliography |>
    dplyr::group_by(
        Publication.Year,
        Item.Type
    ) |>
    dplyr::summarize(
        count = n(),
        p = count / sum(count),
    ) |>
    dplyr::group_by(
        Item.Type
    ) |>
    dplyr::arrange(
        Publication.Year
    ) |>
    mutate(
        count_cumsum = cumsum(count),
        p_cumsum = cumsum(p)
    ) |>
    dplyr::rename(
        publication_year = Publication.Year,
        type = Item.Type
    ) |>
    dplyr::mutate(
        type = dplyr::case_match(
            type,
            "journalArticle" ~ "article",
            .default = type
        )
    )

data_works <- bibliography$works |>
    dplyr::group_by(
        publication_year,
        type
    ) |>
    dplyr::summarize(
        count = n(),
        p = count / sum(count),
    ) |>
    dplyr::group_by(
        type
    ) |>
    dplyr::arrange(
        publication_year
    ) |>
    mutate(
        count_cumsum = cumsum(count),
        p_cumsum = cumsum(p)
    ) |>
    dplyr::rename(
        publication_year = publication_year,
        type = type,
        count_oa = count,
        p_oa = p,
        count_oa_cumsum = count_cumsum,
        p_oa_cumsum = p_cumsum
    )

data <- dplyr::full_join(
    x = data_bib,
    y = data_works,
    by = c("publication_year", "type")
)

rm(data_bib, data_works)

data |>
    dplyr::filter(publication_year >= 1950) |>
    ggplot() +
    scale_fill_viridis_d(option = "plasma") +
    geom_line(aes(x = publication_year, y = count_cumsum / 10, colour = type), linetype = "solid") + # Zotero
    geom_line(aes(x = publication_year, y = count_oa_cumsum / 10, colour = type), linetype = "dashed") + # OpenAlex
    scale_x_continuous(
        breaks = seq(1500, 2020, 10)
    ) +
    scale_y_continuous(
        "Proportion of publications",
        sec.axis = sec_axis(~ . * 10, name = "Cumulative number of references") # divide by 10 to scale back the secondary axis
    ) +
    labs(
        title = "Publications over time",
        x = "Year",
        y = "Number of publications"
    ) +
    theme_minimal() +
    theme(axis.text.y.right = element_text(color = "red")) +
    theme(legend.position = "bottom") +
    guides(
        fill = guide_legend(
            title = "Legend"
        )
    )

rm(data)
```

## Access Status of References

This is checked by using the OpenAlex retrieved works. Therefore it is li=mited to the works that are on OpenAlex. At the moment, only references with a DOI were retrieved from OpenAlex.

```{r}
#| label: oa_status_figure
#| fig-height: 10
#| fig-width: 10

bibliography$works |>
    ggplot(
        aes(
            x = publication_year,
            fill = oa_status
        )
    ) +
    geom_bar(
        position = "fill"
    ) +
    scale_fill_manual(values = c("#CD7F32", "red", "gold", "green", "pink")) +
    ggtitle("Publication Year") +
    theme(
        plot.title = element_text(size = 15)
    ) +
    theme(legend.position = "bottom")
```

## 50 Most often cited Journals
    
```{r}
#| label: top_journals_figure
#| fig-height: 10
#| fig-width: 10

data <- bibliography$bibliography |>
    dplyr::group_by(
        Publication.Title
    ) |>
    dplyr::summarise(
        count = n()
    ) |>
    dplyr::rename(
        Journal = Publication.Title
    ) |>
    dplyr::filter(
        Journal != ""
    ) |>
    dplyr::slice_max(
        count,
        n = 50
    )

data |>
    ggplot(
        aes(
            x = reorder(Journal, count),
            y = count
        )
    ) +
    geom_bar(
        stat = "identity",
        fill = "steelblue"
    ) +
    coord_flip() +
    labs(
        x = "Journal",
        y = "Count"
    ) +
    ggtitle(
        "Most often cited Journals"
    ) +
    theme(
        plot.title = element_text(size = 15)
    )
```

This table contains all Journals as specified in the Zotero database. 
```{r}
IPBES.R::table_dt(data, "cited_journals")
rm(data)
```

## TODO Coutries of Institutes of all authors

sapply(bibliography$works$author, function(x){x["institution_country_code"]}) |> unlist() |> table() |> sort()
```{r}
#| label: top_countries
#| eval: false
#| fig-height: 10
#| fig-width: 10


bibliography$works |>
    dplyr::group_by(
        institution_country_code
    )


top_countries <- sapply(bibliography$works$author, function(x) {
    x["institution_country_code"]
}) |>
    unlist() |>
    table() |>
    sort(decreasing = TRUE) |>
    head(50)

data.frame(
    Country = names(top_countries),
    Count = as.numeric(top_countries)
) |>
    ggplot(
        aes(
            x = reorder(Country, -Count),
            y = Count
        )
    ) +
    geom_bar(
        stat = "identity",
        fill = "steelblue"
    ) +
    coord_flip() +
    labs(
        x = "Country",
        y = "Count"
    ) +
    ggtitle(
        "Countries of Institutes of all Authors"
    ) +
    theme(
        plot.title = element_text(size = 15)
    )
```

# VOSViewer Example

![[VOSViewer](https://tinyurl.com/292ku9w2)](data/VOSviewer-QR-code.png)


# ILK References in Bibliography

This comparison is at the moment done using the DOIs in the target  and the ILK bibliography. Entries which have no DOI can not be compared at the mopment. A comparison could be achieved by using text comparison of the title, but this is not implemenmted yet.

From the **`r length(bibliography$dois_bib)`** references in the target bibliography, **`r sum(bibliography$dois_bib %in% ilk_bibliography$dois_bib)` (`r round(sum(bibliography$dois_bib %in% ilk_bibliography$dois_bib) / length(bibliography$dois_bib), digits = 2)`%) ** are in the ILK bibliography (**`r length(ilk_bibliography$dois_bib)`** references).




